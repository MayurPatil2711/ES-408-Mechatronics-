import cv2
from pyzbar.pyzbar import decode
import numpy as np

# Known QR width in cm for calibration
KNOWN_QR_WIDTH = 15.0  # Width of the QR code in real-world units
KNOWN_DISTANCE = 50.0  # Distance in cm used for initial calibration

# Placeholder for focal length (calculated during calibration)
focal_length = None

# Set the target frame resolution (to reduce lag)
TARGET_WIDTH = 640
TARGET_HEIGHT = 480

def calculate_focal_length(known_distance, real_width, width_in_image):
    """Calculate focal length based on known distance and real width."""
    return (width_in_image * known_distance) / real_width

def calculate_distance(focal_length, real_width, width_in_image):
    """Calculate distance based on focal length, real width, and width in image."""
    return (real_width * focal_length) / width_in_image

def main():
    global focal_length

    # Open the camera
    cap = cv2.VideoCapture(1)  # Adjust camera index if necessary
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, TARGET_WIDTH)  # Reduce resolution
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, TARGET_HEIGHT)

    if not cap.isOpened():
        print("Error: Unable to access the camera.")
        return

    print("Press 'q' to quit.")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Unable to read from camera.")
            break

        # Decode QR codes in the frame
        decoded_objects = decode(frame)

        for obj in decoded_objects:
            points = obj.polygon
            if len(points) == 4:
                # Draw bounding box around QR code
                pts = np.array([[point.x, point.y] for point in points], np.int32).reshape((-1, 1, 2))
                cv2.polylines(frame, [pts], True, (0, 255, 0), 2)

                # Calculate the width of the QR code in the image (use diagonal distance for accuracy)
                width_in_image = max(
                    np.linalg.norm(np.array([points[i].x, points[i].y]) - np.array([points[j].x, points[j].y]))
                    for i in range(4)
                    for j in range(i + 1, 4)
                )

                # Debug information
                print(f"QR Code Width in Image (pixels): {width_in_image}")

                # Calibrate focal length if not already set
                if focal_length is None:
                    focal_length = calculate_focal_length(KNOWN_DISTANCE, KNOWN_QR_WIDTH, width_in_image)
                    print(f"Focal Length: {focal_length:.2f} pixels")

                # Calculate distance to QR code
                distance = calculate_distance(focal_length, KNOWN_QR_WIDTH, width_in_image)

                # Multiply the calculated distance by 2
                distance *= 2  # Double the distance

                # Display the doubled distance on the frame
                text = f"Distance: {distance:.2f} cm"
                cv2.putText(frame, text, (int(points[0].x), int(points[0].y) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6,
                            (0, 255, 0), 2)

                # Print the doubled distance to the console
                print(f"Doubled Distance: {distance:.2f} cm")

        # Display the frame
        cv2.imshow("QR Code Detection and Distance Estimation", frame)

        # Wait for key press for a short time (delay to reduce CPU usage)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release resources
    cap.release()
    cv2.destroyAllWindows()

if _name_ == "_main_":
    main()
