import cv2
import numpy as np

# Start video capture (0 is typically the default webcam)
cap = cv2.VideoCapture(1)

while True:
    # Capture each frame
    ret, frame = cap.read()
    if not ret:
        break

    # Resize frame for faster processing
    frame = cv2.resize(frame, (640, 480))

    # Convert frame to HSV (Hue, Saturation, Value) color space
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define the color range for detecting fire-like colors (Orange and Yellow)
    # Lower and upper bounds for the yellow color
    lower_yellow = np.array([20, 100, 100])  # Hue values for yellow
    upper_yellow = np.array([35, 255, 255])  # Saturation and value thresholds for yellow

    # Lower and upper bounds for the orange color
    lower_orange = np.array([5, 150, 150])  # Hue values for orange
    upper_orange = np.array([18, 255, 255])  # Saturation and value thresholds for orange

    # Create masks to capture both yellow and orange areas
    mask_yellow = cv2.inRange(hsv, lower_yellow, upper_yellow)
    mask_orange = cv2.inRange(hsv, lower_orange, upper_orange)

    # Combine both masks
    mask = cv2.bitwise_or(mask_yellow, mask_orange)

    # Find contours in the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Draw bounding boxes around detected fire areas
    fire_detected = False
    for contour in contours:
        # Filter out small contours to reduce noise
        if cv2.contourArea(contour) > 500:  # Adjust this threshold as needed
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)
            fire_detected = True

    # Display message if fire is detected
    if fire_detected:
        cv2.putText(frame, "Fire Detected!", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    # Display the result
    cv2.imshow("Fire Detection", frame)
    cv2.imshow("Fire Mask", mask)  # Optional: view the mask for debugging

    # Break on 'q' key
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
